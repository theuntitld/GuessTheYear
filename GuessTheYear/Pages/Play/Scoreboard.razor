@implements IDisposable
@inject Data.GamePlay GamePlay
@inject IJSRuntime JSRuntime

<div class="page green-bg @(Visible ? "show" : "")">
    <div class="header">
        <img src="/imgs/Untitld Logo Black.svg" style="max-width:150px;" />
        <h3 style="margin:0; color: black;">@Player?.Name</h3>
    </div>
    
    <div class="body scoreboard score-board">
        <h1 class="title">Final Scoreboard</h1>
        
        <Scores></Scores>
    </div>
</div>

<style>

    .body.scoreboard {
        justify-content: unset;
        overflow: auto;
    }

    .title {
        font-size: 24px;
        font-weight: 600;
        text-align: center;
        margin-bottom: 20px;
    }

    .board {
        list-style: none;
        padding: 0;
        width: 250px;
        margin: 0 auto 20px;
    }

    .board li {
        height: 50px;
        border-bottom: 1px solid #000;
        display: flex;
        align-items: center;
        font-size: 18px;
        justify-content: space-between;
    }

    .board [data-id='@Player?.Id'] {
        font-weight: bold;
    }

    .board .user {
        display: flex;
    }

    .board .rank {
        width: 36px;
    }
    .board .user span {
        display: none;
    }

    .board [data-id='@Player?.Id'] .user span {
        display: inline;
    }

</style>

@code {

    [Parameter]
    public bool Visible { get; set; }

    [Parameter]
    public Data.Player? Player { get; set; }

    [Parameter]
    public EventCallback<string> SettingsOpened { get; set; }

    private void HandleStageChanged(object sender, EventArgs e)
    {
        InvokeAsync(async () =>
        {
            await Task.Yield(); // Ensures that the rendering process has a chance to execute

            StateHasChanged(); // Notify Blazor to re-render the component

            await this.JSRuntime.InvokeVoidAsync("updateScores", this.GamePlay.Players.OrderByDescending(x => x.Score));
        });
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            HandleStageChanged(null, null);
    }

    protected override void OnInitialized()
    {
        GamePlay.StageChanged += HandleStageChanged!;
    }

    public void Dispose()
    {
        GamePlay.StageChanged -= HandleStageChanged!;
    }
}
