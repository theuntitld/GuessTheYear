@page "/play"

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage ProtectedLocalStore
@inject Data.GamePlay GamePlay
@implements IDisposable

@inject Data.GamePlay GamePlay

<DisplayNamePicker Visible="@(showNamePicker && GamePlay.Stage <= GamePlay.Stages.Count)"
                   NameSaved="(string name) => { this.name = name; this.SaveName(); }" />

<Lobby Visible="@(!showNamePicker && GamePlay.Stage == 0)"
       SettingsOpened="() => { this.showNamePicker = true; }"
       Player="@player" />

<GameStarted Visible="@(!showNamePicker && GamePlay.Stage > 0 && GamePlay.Stage <= GamePlay.Stages.Count)"
             SettingsOpened="() => { this.showNamePicker = true; }"
             Name="@name"
             Player="@player" />

<Scoreboard Visible="@(GamePlay.Stage > GamePlay.Stages.Count)"
            SettingsOpened="() => { this.showNamePicker = true; }"
            Player="@player" />

@code {
    private string? name = null;
    string code = default!;
    public Data.Player? player;

    private bool showNamePicker = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var localCodeResult = await ProtectedLocalStore.GetAsync<string>("code");

            if (!localCodeResult.Success)
            {
                code = Guid.NewGuid().ToString();

                await ProtectedLocalStore.SetAsync("code", code);
            }
            else
                code = localCodeResult.Value!;

            this.player = this.GamePlay.Players.FirstOrDefault(x => x.Id == code);

            StateHasChanged();
        }
    }

    private void SaveName()
    {
        showNamePicker = false;

        if (this.player != null)
            this.GamePlay.RemovePlayer(player);

        this.player = this.GamePlay.AddPlayer(code, name!);
    }

    protected override void OnInitialized()
    {
        GamePlay.StageChanged += HandleStageChanged!;
    }

    private void HandleStageChanged(object sender, EventArgs e)
    {
        InvokeAsync(async () =>
        {
            await Task.Yield(); // Ensures that the rendering process has a chance to execute
            StateHasChanged(); // Notify Blazor to re-render the component
        });
    }

    public void Dispose()
    {
        GamePlay.StageChanged -= HandleStageChanged!;
    }
}