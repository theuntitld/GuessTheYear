@inject IJSRuntime JSRuntime

<div class="page black-bg @(Visible ? "show" : "")">
    <div class="header">
        <a class="setting-button dark" href="/play" @onclick:preventDefault="true" @onclick="async () => {await SettingsOpened.InvokeAsync();}">
            <div />
            <span>@Name</span>
        </a>
        <img src="/imgs/un symbol gn.svg" style="max-width:50px;" />
    </div>

    <div class="body">
        <div class="score-display">
            <h3>SCORE</h3>
            <h3>240</h3>
        </div>
        
        <h1 class="stage-display">Stage 01</h1>
        
        <div class="wheel-wrapper">
            <div id="@WheelId" class="wheel">
                <ul class="wheel-scroll">
                    @for (var i = 1900; i < DateTime.Now.Year; i++)
                    {
                        <li class="wheel-item">@i</li>
                    }
                </ul>
            </div>
        </div>

@*        <div style="width: 100%; height: 70%;">
            <div style="border-right: 1px solid #cdfe00; border-left: 1px solid #cdfe00; height: 100%; width: 30%; margin: 0 auto;"></div>
        </div>*@

        <div style="justify-content:center; display:flex;">
            <button class="save-button"@onclick="SubmitAnswer">Submit</button>
        </div>
    </div>
</div>

<style>
    .body {
        padding-top: 30px;
    }

    .stage-display {
        width: 100%;
        color: #fff;
        text-align: center;
        font-size: 24px;
        font-weight: 600;
        margin-bottom: 30px;
    }

    .wheel-wrapper {
        padding: 20px 0;
        width: 130px;
        border-inline: 1px solid #CDFE00;
        overflow: hidden;
        margin: 0 auto;
        color: #CDFE00;
        margin-bottom: 45px;
    }

    .wheel {
        height: 100%;
        overflow: hidden;
    }

    .wheel-scroll {
        list-style: none;
        padding: 0;
        text-align: center;
        margin-top: 130px;
    }

    .wheel li {
        font-size: 20px;
    }

    .wheel-item[style*="rotateX(0deg)"] {
        font-size: 28px;
        font-weight: bold;
    }
    
    .save-button {
        margin-bottom: 100px;
    }
</style>

@code {
    [Parameter]
    public bool Visible { get; set; }

    [Parameter]
    public string Name { get; set; } = default!;

    [Parameter]
    public EventCallback<string> SettingsOpened { get; set; }

    [Parameter]
    public EventCallback<string> AnswerSubmitted { get; set; }

    private string WheelId = "Wheel" + Guid.NewGuid().ToString();

    private async Task SubmitAnswer()
    {
        await AnswerSubmitted.InvokeAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await this.JSRuntime.InvokeVoidAsync("mountWheel", WheelId);
        }
    }
}
