@page "/admin"

@inject Data.GamePlay GamePlay
@implements IDisposable
@inject IJSRuntime JSRuntime

<style>

    .animated {
        opacity: 0;
        transition: 0.4s;
        position: absolute;
        transform: scale(-10%);
    }

        .animated.show {
            opacity: 1;
            transform: scale(1);
        }
</style>

<div style="display:flex; height: 100%;">
    <div style="flex:1; padding: 20px; display:flex; flex-direction:column;">

        <div>
            <button class="btn btn-primary" @onclick="Prev">Prev</button>
            <button class="btn btn-primary" @onclick="Next">Next</button>

            <h3 style="float:right; position:static !important;" class="animated @(this.GamePlay.Stage > 0 && this.GamePlay.Stage <= this.GamePlay.Stages.Count ? "show" : "")">
                Stage &nbsp;
                @foreach (var item in this.GamePlay.Stages)
                {
                    <span class="animated @(this.GamePlay.Stage == item.Key ? "show" : "")">@item.Key</span>
                }
                &nbsp;
            </h3>
        </div>

        <div style="display:flex; align-items:center; justify-content:center; width:100%; height:100%; position:relative;">
            @foreach (var item in this.GamePlay.Stages)
            {
                <img src="imgs/@(item.Key).jpg" style="max-width:100%;" class="animated @(this.GamePlay.Stage == item.Key ? "show" : "")" />
            }
        </div>
    </div>

    <div style="flex:1; border-left: 1px solid #d9d9d9;">
        <ScoreBoard />
    </div>
</div>

@code {

    private void Prev()
    {
        if (GamePlay.Stage == 0)
            return;

        GamePlay.Stage--;
    }

    private void Next()
    {
        if (GamePlay.Stage > GamePlay.Stages.Count)
            return;

        GamePlay.Stage++;
    }

    protected override void OnInitialized()
    {
        GamePlay.StageChanged += HandleStageChanged!;
    }

    private void HandleStageChanged(object sender, EventArgs e)
    {
        InvokeAsync(async () =>
        {
            await Task.Yield(); // Ensures that the rendering process has a chance to execute

            StateHasChanged(); // Notify Blazor to re-render the component

            await this.JSRuntime.InvokeVoidAsync("updateScores", this.GamePlay.Players.Where(x => x.Enrolled).OrderByDescending(x => x.Score));
        });
    }

    // Don't forget to unsubscribe when the component is disposed
    public void Dispose()
    {
        GamePlay.StageChanged -= HandleStageChanged!;
    }
}
